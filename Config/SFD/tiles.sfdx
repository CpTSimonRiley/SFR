// SPECIALS
defaultTile(d_t)
{
    colorPalette = palNone;
    material = default;
    kickable = true;
}
Tile(error)
{
    drawCategory = INV;
    mainLayer = 1;
    type = Static;
    editorEnabled = false;
    tileTexture = none;
    material.blockExplosions = false;
    doTakeDamage.Fire = false;
}


// GROUND
defaultTile(DefaultTile)
{
    kickable = true;
    uniqueId = 0;
    material = default;
    projectileHit = true;
    absorbProjectile = true;
    objectStrength = 0.0;
    isCloud = false;
    life = 0.0;
    drawCategory = SLD;
    mainLayer = 1;
    type = Static;
    editorEnabled = true;
    fixture()
    {
        collisionGroup = static_ground;
        collisionPoints = null;
        blockFire = true;
    }
    colorPalette = Solid;
    freeRotation = true;
    kickable = true;
    punchable = true;
    material.flammable = false;
    doTakeDamage.Fire = false;
}


// MISC
Tile(Acid00A)
{
    isCloud = true;
    cloudRotation = 0;
    drawCategory = FG;
    material = water;
    sizeable = H;
    fixture()
    {
        collisionGroup = none;
    }
    animation(Acid00A)
    {
        frameTimes = 100;
        width = 16;
        isSynced = true;
    }
}
Tile(Acid00B)
{
    drawCategory = FG;
    material = water;
    sizeable = D;
    fixture()
    {
        collisionGroup = none;
    }
}
Tile(DinerBooth)
{
    colorPalette = Concrete;
    material = cloth;
    fixture()
    {
        collisionPoints = (-16, -8), (16, -8), (16, 6), (-16, 6);
    }
}
Tile(Duct00A)
{
    drawCategory = FG;
    sizeable = H;
    projectileHit = false;
    fixture()
    {
        collisionGroup = none;
    }
}
Tile(Duct00B)
{
    drawCategory = FG;
    sizeable = H;
    projectileHit = false;
    fixture()
    {
        collisionGroup = none;
    }
}
Tile(Duct00C)
{
    drawCategory = OBJ;
    sizeable = N;
    life = 5;
    doTakeDamage.Fire = true;
    material.resistance.impact.modifier = 0;
    material.destroyEffect = none;
    material.destroySound = none;
}
Tile(Glass00A)
{
    sizeable = D;
    material = glass;
    colorPalette = metal;
}
Tile(Glass00B)
{
    sizeable = D;
    material = glass;
    colorPalette = metal;
}
Tile(Glass00C)
{
    sizeable = D;
    material = glass;
    colorPalette = metal;
}
Tile(Glass00D)
{
    sizeable = D;
    material = glass;
    colorPalette = metal;
}
Tile(InvisibleBlock)
{
    tileTexture = Invisible8x8;
    sizeable = D;
}
Tile(InvisibleBlockObjectsOnly)
{
    tileTexture = Invisible8x8;
    projectileHit = false;
    material.blockExplosions = false;
    material.transparent = true;
    sizeable = D;
    fixture()
    {
        collisionPoints = (-4, -2), (4, -2), (4, 4), (-4, 4);
        blockFire = false;
    }
}
Tile(InvisibleExplosionBlocker)
{
    tileTexture = Invisible4x4;
    sizeable = D;
    material.blockExplosions = true;
    material.flammable = false;
    punchable = false;
    kickable = false;
    projectileHit = false;
    fixture()
    {
        collisionGroup = none;
        blockFire = false;
    }
}
Tile(LineOfSightBlocker)
{
    sizeable = D;
    absorbProjectile = false;
    punchable = false;
    kickable = false;
    material.hit.projectile.sound = none;
    material.hit.projectile.effect = none;
    material.blockExplosions = false;
    material.transparent = false;
    fixture()
    {
        collisiongroup = none;
        blockFire = false;
    }
}
Tile(PlaceholderTile1)
{
    sizeable = D;
}
Tile(PlaceholderTileRamp1)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-4, -4), (4, -4), (4, 4);
    }
}
Tile(PlaceholderTileRamp2)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -4), (8, -4), (8, 4);
    }
}
Tile(PlaceholderPlatform1)
{
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    kickable = false;
    material.blockExplosions = false;
    sizeable = H;
    fixture()
    {
        collisionPoints = (-4, 0), (4, 0), (4, 4), (-4, 4);
    }
}
Tile(PlaceholderPlatformRamp1)
{
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    kickable = false;
    material.blockExplosions = false;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-4, 0), (-4, -4), (4, 4), (4, 8);
    }
}
Tile(PlaceholderPlatformRamp2)
{
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    kickable = false;
    material.blockExplosions = false;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 0), (-8, -4), (8, 4), (8, 8);
    }
}
Tile(InvisibleBlockSmall)
{
    tileTexture = Invisible8x8;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-3.625, -3.625), (3.625, -3.625), (3.625, 3.625), (-3.625, 3.625);
    }
}
Tile(InvisibleBlockNoCollision)
{
    tileTexture = Invisible8x8;
    sizeable = D;
    material.blockExplosions = false;
    material.flammable = false;
    punchable = false;
    kickable = false;
    projectileHit = false;
    fixture()
    {
        collisionGroup = none;
        blockFire = false;
    }
}
Tile(InvisibleLadder)
{
    sizeable = V;
    isLadder = true;
    freeRotation = false;
    colorPalette = palNone;
    absorbProjectile = false;
    kickable = false;
    projectileHit = false;
    fixture()
    {
        collisionGroup = none;
        blockFire = false;
        collisionPoints = (-8, -4), (8, -4), (8, 4), (-8, 4);
    }
}
Tile(InvisiblePlatform)
{
    tileTexture = Invisible8x8;
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    punchable = false;
    kickable = false;
    material.hit.projectile.sound = none;
    material.hit.projectile.effect = none;
    material.blockExplosions = false;
    sizeable = H;
}
Tile(PoolTable00)
{
    fixture()
    {
        material = wood;
        collisionPoints = (16, -8), (16, 4), (-16, 4), (-16, -8);
    }
}
Tile(Portal)
{
    material.blockExplosions = false;
    sizeable = N;
    projectileHit = false;
    fixture()
    {
        collisionGroup = none;
        collisionPoints = (-8, -16), (8, -16), (8, 16), (-8, 16);
    }
    helpEntry = Portals;
}
Tile(PortalD)
{
    material.blockExplosions = false;
    sizeable = N;
    projectileHit = false;
    fixture()
    {
        collisionGroup = none;
        collisionPoints = (-8, -16), (8, -16), (8, 16), (-8, 16);
    }
    helpEntry = Portals;
}
Tile(PortalU)
{
    material.blockExplosions = false;
    sizeable = N;
    projectileHit = false;
    fixture()
    {
        collisionGroup = none;
        collisionPoints = (-8, -16), (8, -16), (8, 16), (-8, 16);
    }
    helpEntry = Portals;
}
Tile(Rug00A)
{
    life = 5;
    material = cloth;
    material.flammable = true;
    doTakeDamage.Fire = true;
    colorPalette = Cloth;
    kickable = false;
    punchable = false;
    material.resistance.impact.threshold = 15;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-4.25, 4.1), (-4.25, 0), (4.25, 0), (4.25, 4.1);
    }
}
Tile(Rug00A_D)
{
    material = cloth;
    colorPalette = Cloth;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-4, 4.1), (-4, 0), (4, 0), (4, 4.1);
    }
}
Tile(Sandbags00A)
{
    sizeable = D;
    material.stepSound = none;
}
Tile(Sandbags00B)
{
    sizeable = D;
    material.stepSound = none;
}
Tile(Sandbags00C)
{
    sizeable = D;
    material.stepSound = none;
}
Tile(Sandbags00D)
{
    sizeable = D;
    material.stepSound = none;
}
Tile(Sandbags00E)
{
    sizeable = D;
    material.stepSound = none;
}
Tile(Sandbags00F)
{
    sizeable = D;
    material.stepSound = none;
}
Tile(Sandbags00G)
{
    sizeable = D;
    material.stepSound = none;
}
Tile(Sandbags00H)
{
    sizeable = D;
    material.stepSound = none;
}
Tile(Sandbags01A)
{
    sizeable = D;
    material.stepSound = none;
}
Tile(Sandbags01B)
{
    sizeable = D;
    material.stepSound = none;
}
Tile(Sandbags01C)
{
    sizeable = D;
    material.stepSound = none;
}
Tile(Sandbags01D)
{
    sizeable = D;
    material.stepSound = none;
}
Tile(Shadow00A)
{
    sizeable = D;
    material.destroyEffect = none;
    material.destroySound = none;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(Shadow00B)
{
    sizeable = D;
    material.destroyEffect = none;
    material.destroySound = none;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(Shadow00C)
{
    sizeable = D;
    material.destroyEffect = none;
    material.destroySound = none;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(Shadow00D)
{
    sizeable = D;
    material.destroyEffect = none;
    material.destroySound = none;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(Shadow00E)
{
    sizeable = D;
    material.destroyEffect = none;
    material.destroySound = none;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(Shadow02A)
{
    sizeable = D;
    material.destroyEffect = none;
    material.destroySound = none;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(Shadow02B)
{
    sizeable = D;
    material.destroyEffect = none;
    material.destroySound = none;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(Shadow03A)
{
    sizeable = D;
    material.destroyEffect = none;
    material.destroySound = none;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(Shadow03B)
{
    sizeable = D;
    material.destroyEffect = none;
    material.destroySound = none;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(TankTread00A)
{
    colorPalette = Metal;
    material = metal;
    sizeable = H;
}
Tile(TankTread00B)
{
    colorPalette = Metal;
    material = metal;
    fixture()
    {
        collisionPoints = (0, -12), (8, -12), (8, 12), (-8, 12), (-8, 0);
    }
}
Tile(TankTread00C)
{
    colorPalette = Metal;
    material = metal;
}
Tile(TrainPart00A)
{
    colorPalette = Metal;
    material = metal;
    colorPalette = metal;
}
Tile(TrainPart01A)
{
    colorPalette = Metal;
    material = metal;
    colorPalette = metal;
}
Tile(SteamSpawner)
{
    colorPalette = Metal;
    material.destroyEffect = none;
    material.destroySound = none;
    material.blockExplosions = false;
    projectileHit = false;
    tileTexture = Invisible8x8;
    fixture()
    {
        collisionGroup = none;
        blockFire = false;
    }
}
Tile(BgSteamSpawner)
{
    material.blockExplosions = false;
    drawCategory = BG;
    projectileHit = false;
    tileTexture = Invisible8x8;
    fixture()
    {
        collisionGroup = none;
        blockFire = false;
    }
}
Tile(Water00A)
{
    isCloud = true;
    cloudRotation = 0;
    drawCategory = FG;
    material = water;
    sizeable = H;
    projectileHit = false;
    fixture()
    {
        collisionGroup = none;
        blockFire = false;
    }
    animation(Water00A)
    {
        frameTimes = 100;
        width = 16;
        isSynced = true;
    }
}
Tile(Water00B)
{
    drawCategory = FG;
    material = water;
    sizeable = D;
    projectileHit = false;
    fixture()
    {
        collisionGroup = none;
        blockFire = false;
    }
    animation(Water00B)
    {
        frameTimes = 100;
        width = 16;
        isSynced = true;
    }
}


// ADOBE
defaultTile(d_t)
{
    material = concrete;
    colorPalette = Concrete;
    sizeable = A;
}
Tile(Adobe00A) {}
Tile(Adobe00B) {}
Tile(Adobe00C) {}
Tile(Adobe00D) {}
Tile(Adobe00E) {}
Tile(Adobe00F) {}
Tile(Adobe00G) {}
Tile(Adobe00H) {}
Tile(Adobe00I) {}
Tile(Adobe00J) {}
Tile(Adobe00K) {}
Tile(Adobe00L) {}
Tile(AdobeArch00A)
{
    fixture()
    {
        collisionPoints = (-8, -4), (4, 8), (-8, 8);
    }
}
Tile(AdobeArch00B)
{
    fixture()
    {
        collisionPoints = (8, -4), (8, 8), (-4, 8);
    }
}


// ASPHALT
defaultTile(d_t)
{
    material = concrete;
    colorPalette = Concrete;
    sizeable = A;
}
Tile(Asphalt00A) {}
Tile(Asphalt00B) {}
Tile(Asphalt00C)
{
    fixture()
    {
        collisionPoints = (-4, -4), (4, -4), (4, 4);
    }
}
Tile(Asphalt00D) {}
Tile(Asphalt00E)
{
    fixture()
    {
        collisionPoints = (-8, -4), (8, -4), (8, 4);
    }
}
Tile(Asphalt00F) {}
Tile(Asphalt00G)
{
    fixture()
    {
        collisionPoints = (-16, -4), (16, -4), (16, 4);
    }
}
Tile(Asphalt00H) {}
Tile(Asphalt00I) {}
Tile(Asphalt00J) {}


// BRICKS
defaultTile(d_t)
{
    material = stone;
    colorPalette = Stone;
    sizeable = A;
}
Tile(Bricks00A) {}
Tile(Bricks00B) {}


// CONCRETE
defaultTile(d_t)
{
    material = concrete;
    colorPalette = Concrete;
    sizeable = A;
    instaGibPlayer = true;
}
Tile(Concrete00A) {}
Tile(Concrete00B) {}
Tile(Concrete00C) {}
Tile(Concrete00D)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 0), (-8, -8), (8, 0), (8, 8);
    }
}
Tile(Concrete00E)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 8), (-8, 0), (8, -8), (8, 0);
    }
}
Tile(Concrete00F)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 0), (-8, -8), (8, 0), (8, 8);
    }
}
Tile(Concrete00G)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 8), (-8, 0), (8, -8), (8, 0);
    }
}
Tile(Concrete00H) {}
Tile(Concrete00I) {}
Tile(Concrete00J) {}
Tile(Concrete00K) {}
Tile(Concrete00L) {}
Tile(Concrete00M) {}
Tile(Concrete00N)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-4, -8), (4, 0), (4, 8), (-4, 0);
    }
}
Tile(Concrete01A) {}
Tile(Concrete01B) {}
Tile(Concrete01C) {}
Tile(Concrete01D) {}
Tile(Concrete01E) {}
Tile(Concrete01F)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -12), (8, -4), (8, 12), (-8, 4);
    }
}
Tile(Concrete01G)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-4, -12), (4, -4), (4, 12), (-4, 4);
    }
}
Tile(Concrete02A) {}
Tile(Concrete02B) {}
Tile(Concrete02C) {}
Tile(Concrete02D) {}
Tile(Concrete02E) {}
Tile(Concrete02F) {}
Tile(Concrete02G) {}
Tile(Concrete02H)
{
    fixture()
    {
        collisionPoints = (-8, -4), (8, -4), (8, 4);
    }
}
Tile(Concrete02I)
{
    fixture()
    {
        collisionPoints = (-8, -4), (8, -4), (-8, 4);
    }
}
Tile(Concrete02J)
{
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 8);
    }
}
Tile(Concrete02K)
{
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (-8, 8);
    }
}
Tile(Concrete03A) {}
Tile(Concrete03B) {}
Tile(Concrete03C) {}
Tile(Concrete07A) {}
Tile(Concrete07B) {}
Tile(Concrete07C) {}
defaultTile(d_t)
{
    instaGibPlayer = false;
}
Tile(ConcreteBlockade00A)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-16, -4), (16, -4), (4, 4), (-4, 4);
    }
}
Tile(ConcreteBlockade00B)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-4, -8), (4, -8), (4, 8), (-4, 8);
    }
}
Tile(ConcreteBlockade00C)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-4, -8), (4, -8), (4, 8), (-4, 8);
    }
}

// DIRT
defaultTile(d_t)
{
    material = dirt;
    colorPalette = Dirt;
    sizeable = D;
}
Tile(Dirt00A) {}
Tile(Dirt00B) {}
Tile(Dirt00C) {}
Tile(Dirt00D) {}
Tile(Dirt00E) {}
Tile(Dirt00F) {}
Tile(Dirt00G) {}
Tile(Dirt01A) {}
Tile(Dirt01B) {}
Tile(Dirt01C) {}
Tile(Dirt01D) {}
Tile(Dirt01E) {}
Tile(Dirt01F) {}
Tile(Dirt02A) {}
Tile(Dirt02B) {}
Tile(Dirt02C)
{
    sizeable = n;
    fixture()
    {
        collisionPoints = (-4, -4), (4, -4), (4, 4);
    }
}
Tile(Dirt02D) {}
Tile(Dirt02E)
{
    sizeable = n;
    fixture()
    {
        collisionPoints = (-8, -4), (8, -4), (8, 4);
    }
}
Tile(Dirt02F) {}
Tile(Dirt02G)
{
    sizeable = n;
    fixture()
    {
        collisionPoints = (-16, -4), (16, -4), (16, 4);
    }
}
Tile(Dirt02H) {}
Tile(Dirt02I) {}
Tile(Dirt02J) {}


// GLASS
defaultTile(d_t)
{
    material = glass;
    colorPalette = Metal;
    sizeable = A;
}
Tile(BulletproofGlass00A) {}
Tile(BulletproofGlass00B)
{
    sizeable = n;
    fixture()
    {
        collisionPoints = (-4, -4), (4, -4), (4, 4);
    }
}
Tile(BulletproofGlass00C)
{
    sizeable = n;
    fixture()
    {
        collisionPoints = (-8, -8), (8, 0), (8, 8), (-8, 0);
    }
}
Tile(BulletproofGlass00D) {}
Tile(BulletproofGlass00Weak)
{
    sizeable = n;
    life = 200;
    material.resistance.fire.modifier = 1;
    material.resistance.fire.threshold = 0;
    material.resistance.explosion.modifier = 1;
    material.resistance.explosion.threshold = 0;
    material.resistance.projectile.modifier = 1;
    material.resistance.projectile.threshold = 0;
    material.resistance.impact.modifier = 1;
    material.resistance.impact.threshold = 0;
}
Tile(GlassSheet00A)
{
    adpnc = true;
    life = 5;
    gibpressure.enableoneway = true;
    gibpressure.total = 80 kg;
    gibpressure.spike = 400 kg;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    drawCategory = OBJ;
    doTakeDamage.fire = true;
    material.resistance.fire.modifier = 1;
    breakOnDive = true;
    breakOnStagger = true;
    fixture()
    {
        collisionPoints = (-4, -2), (4, -2), (4, 4), (-4, 4);
        blockFire = true;
    }
}
Tile(GlassSheet00B)
{
    adpnc = true;
    life = 5;
    gibpressure.enableoneway = true;
    gibpressure.total = 80 kg;
    gibpressure.spike = 400 kg;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    drawCategory = OBJ;
    doTakeDamage.fire = true;
    material.resistance.fire.modifier = 1;
    breakOnDive = true;
    breakOnStagger = true;
    fixture()
    {
        collisionPoints = (-8, 0), (-8, -4), (8, 4), (8, 8);
        blockFire = true;
    }
}
Tile(GlassSheet00C)
{
    adpnc = true;
    life = 5;
    gibpressure.enableoneway = true;
    gibpressure.total = 80 kg;
    gibpressure.spike = 400 kg;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    drawCategory = OBJ;
    doTakeDamage.fire = true;
    material.resistance.fire.modifier = 1;
    breakOnDive = true;
    breakOnStagger = true;
    fixture()
    {
        collisionPoints = (-8, 8), (-8, 4), (8, -4), (8, 0);
        blockFire = true;
    }
}
Tile(GlassSheet00D)
{
    adpnc = true;
    life = 5;
    gibpressure.enableoneway = true;
    gibpressure.total = 80 kg;
    gibpressure.spike = 400 kg;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    drawCategory = OBJ;
    doTakeDamage.fire = true;
    material.resistance.fire.modifier = 1;
    breakOnDive = true;
    breakOnStagger = true;
    fixture()
    {
        collisionPoints = (-3, -4), (3, -4), (3, 4), (-3, 4);
        blockFire = true;
    }
}
Tile(GlassSheet00E)
{
    adpnc = true;
    life = 5;
    gibpressure.enableoneway = true;
    gibpressure.total = 80 kg;
    gibpressure.spike = 400 kg;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    drawCategory = OBJ;
    doTakeDamage.fire = true;
    material.resistance.fire.modifier = 1;
    breakOnDive = true;
    breakOnStagger = true;
    fixture()
    {
        collisionPoints = (-4, 0), (-4, -4), (4, 4), (4, 8);
        blockFire = true;
    }
}
Tile(GlassSheet00F)
{
    adpnc = true;
    life = 5;
    gibpressure.enableoneway = true;
    gibpressure.total = 80 kg;
    gibpressure.spike = 400 kg;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    drawCategory = OBJ;
    doTakeDamage.fire = true;
    material.resistance.fire.modifier = 1;
    breakOnDive = true;
    breakOnStagger = true;
    fixture()
    {
        collisionPoints = (-4, -4), (4, -4), (4, 4);
        blockFire = true;
    }
}
Tile(ReinforcedGlass00A)
{
    life = 50;
    objectStrength = 50;
    drawCategory = OBJ;
    breakOnDive = true;
    breakOnStagger = true;
    material.resistance.fire.modifier = 1;
    material.resistance.fire.threshold = 0;
    material.resistance.explosion.modifier = 1;
    material.resistance.explosion.threshold = 0;
    material.resistance.projectile.modifier = 1;
    material.resistance.projectile.threshold = 0;
    material.resistance.impact.modifier = 1;
    material.resistance.impact.threshold = 0;
    animation(ReinforcedGlass00A)
    {
        width = 8;
        frameTimes = 0;
    }
}


// ICE
defaultTile(d_t)
{
	material=ice; sizeable=A;
}
Tile(Ice00A){}
Tile(Ice00B){}
Tile(Ice00C){}
Tile(Ice00D){}
Tile(Ice00E){ sizeable=N; fixture(){ collisionPoints=(-8,-12),(8,-4),(8,12),(-8,4); } }
Tile(Ice00F){ sizeable=N; fixture(){ collisionPoints=(-8,-4),(8,-12),(8,4),(-8,12); } }
Tile(Ice01A){}


// METAL
defaultTile(d_t)
{
    material = metal;
    material.resistance.fire.modifier = 0;
    colorPalette = Metal;
    sizeable = A;
    instaGibPlayer = true;
}
Tile(DuctWall00A) {}
Tile(DuctWall00B) {}
Tile(DuctWall00C) {}
Tile(DuctWall00D) {}
Tile(DuctWall00E) {}
Tile(Metal00A) {}
Tile(Metal00B) {}
Tile(Metal00C) {}
Tile(Metal00D) {}
Tile(Metal00E)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, 0), (8, 8), (-8, 0);
    }
}
Tile(Metal00F)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 0), (8, -8), (8, 0), (-8, 8);
    }
}
Tile(Metal00H) {}
Tile(Metal00I) {}
Tile(Metal00J) {}
Tile(Metal01A) {}
Tile(Metal01B) {}
Tile(Metal01C) {}
Tile(Metal02A) {}
Tile(Metal02B) {}
Tile(Metal02C) {}
Tile(Metal02D) {}
Tile(Metal02E) {}
Tile(Metal02F)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -12), (8, -4), (8, 12), (-8, 4);
    }
}
Tile(Metal02G)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -4), (8, -12), (8, 4), (-8, 12);
    }
}
Tile(Metal03A) {}
Tile(Metal03B) {}
Tile(Metal03C)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 0), (-8, -8), (8, 0), (8, 8);
    }
}
Tile(Metal03D)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 8), (-8, 0), (8, -8), (8, 0);
    }
}
Tile(Metal04A) {}
Tile(Metal04B) {}
Tile(Metal04C) {}
Tile(Metal04D) {}
Tile(Metal04E) {}
Tile(Metal04F) {}
Tile(Metal04G) {}
Tile(Metal04H) {}
Tile(Metal04I) {}
Tile(Metal04J)
{
	sizeable = N;
	fixture()
	{
		collisionPoints = (-6, -6), (6, -6, (6, 6), (-6, 6);
		}
	}
Tile(Metal05A) {}
Tile(Metal05B) {}
Tile(Metal05C) {}
Tile(Metal05D) {}
Tile(Metal05E) {}
Tile(Metal05F) {}
Tile(Metal05G) {}
Tile(Metal05H) {}
Tile(Metal05I) {}
Tile(Metal05J)
{
	sizeable = N;
	fixture()
	{
		collisionPoints = (-12, -12), (12, -12, (12, 12), (-12, 12);
	}
}
Tile(Metal05K) {}
Tile(Metal06A) {}
Tile(Metal06B) {}
Tile(Metal06C) {}
Tile(Metal06D) {}
Tile(Metal06E) {}
Tile(Metal06F) {}
Tile(Metal07A) {}
Tile(Metal07B) {}
Tile(Metal07C) {}
Tile(Metal07D) {}
Tile(Metal07E) {}
Tile(Metal07F) {}
Tile(Metal07G) {}
Tile(Metal07H) {}
Tile(Metal07I) {}
Tile(Metal07J) {}
Tile(Metal07K) {}
Tile(Metal07L) {}
Tile(Metal07M)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 8), (-8, 0);
    }
}
Tile(Metal07N)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 8), (-8, 0);
    }
}
Tile(Metal07O)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 8), (-8, 0);
    }
}
Tile(Metal07P)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 0), (-8, 8);
    }
}
Tile(Metal07Q)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 0), (-8, 8);
    }
}
Tile(Metal07R)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 0), (-8, 8);
    }
}
Tile(Metal07S)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 0), (8, -8), (8, 8), (-8, 8);
    }
}
Tile(Metal07T)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 0), (8, -8), (8, 8), (-8, 8);
    }
}
Tile(Metal07U)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 0), (8, -8), (8, 8), (-8, 8);
    }
}
Tile(Metal07V)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, 0), (8, 8), (-8, 8);
    }
}
Tile(Metal07W)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, 0), (8, 8), (-8, 8);
    }
}
Tile(Metal07X)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, 0), (8, 8), (-8, 8);
    }
}
Tile(Metal08A) {}
Tile(Metal08B) {}
Tile(Metal08C) {}
Tile(Metal08D) {}
Tile(Metal08E) {}
Tile(Metal08F) {}
Tile(Metal09A) {}
Tile(Metal09B) {}
Tile(Metal09C) {}
Tile(Metal09D) {}
Tile(Metal09E)
{
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 8), (0, 8);
    }
}
Tile(Metal09F)
{
    fixture()
    {
        collisionPoints = (0, -8), (8, -8), (8, 8), (-8, 8);
    }
}
Tile(Metal10A) {}
Tile(Metal10B)
{
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 8);
    }
}
Tile(Metal10C)
{
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (-8, 8);
    }
}
Tile(Metal10D) {}
Tile(Metal11A) {}
Tile(Metal11B) {}
Tile(Metal12A) {}
Tile(Metal12B) {}
Tile(Metal12C)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-4, -8), (4, -8), (4, 8), (-4, 0);
    }
}
Tile(Metal12D)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 8), (-8, 0);
    }
}
Tile(Metal13A) {}
Tile(Metal13B) {}
Tile(Metal13C) {}
Tile(Metal13D) {}
Tile(Metal13E) {}
Tile(Metal13F) {}
Tile(MetalBars00A)
{
    projectileHit = false;
    material.blockExplosions = false;
    material.transparent = true;
    fixture()
    {
        blockFire = false;
    }
}
Tile(MetalBars00B)
{
    projectileHit = false;
    material.blockExplosions = false;
    material.transparent = true;
    fixture()
    {
        blockFire = false;
    }
}
Tile(MetalBars00C)
{
    projectileHit = false;
    material.blockExplosions = false;
    material.transparent = true;
    fixture()
    {
        blockFire = false;
    }
}
Tile(MetalCounter00)
{
    sizeable = N;
    drawCategory = OBJ;
}

defaultTile(d_t)
{
    instaGibPlayer = false;
}
Tile(MetalLadder00A)
{
    isLadder = true;
    sizeable = V;
    freeRotation = false;
    material.blockExplosions = false;
    projectileHit = false;
    fixture()
    {
        collisionGroup = none;
        collisionPoints = (-6, -4), (6, -4), (6, 4), (-6, 4);
        blockFire = false;
    }
}
Tile(MetalLadder00B)
{
    isLadder = true;
    sizeable = V;
    freeRotation = false;
    material.blockExplosions = false;
    projectileHit = false;
    fixture()
    {
        collisionGroup = none;
        collisionPoints = (-6, -4), (6, -4), (6, 4), (-6, 4);
        blockFire = false;
    }
}
Tile(MetalLadder00C)
{
    isLadder = true;
    sizeable = V;
    freeRotation = false;
    material.blockExplosions = false;
    projectileHit = false;
    fixture()
    {
        collisionGroup = none;
        collisionPoints = (-6, -4), (6, -4), (6, 4), (-6, 4);
        blockFire = false;
    }
}
Tile(MetalLadder01A)
{
    isLadder = true;
    sizeable = V;
    freeRotation = false;
    material.blockExplosions = false;
    projectileHit = false;
    fixture()
    {
        collisionGroup = none;
        collisionPoints = (-6, -4), (6, -4), (6, 4), (-6, 4);
        blockFire = false;
    }
}
Tile(MetalPlat00A)
{
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = H;
}
Tile(MetalPlat00B)
{
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = H;
}
Tile(MetalPlat00C)
{
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = H;
}
Tile(MetalPlat00D)
{
    isCloud = true;
    cloudRotation = 0.785398163;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 0), (-8, -8), (8, 0), (8, 8);
    }
}
Tile(MetalPlat00E)
{
    isCloud = true;
    cloudRotation = -0.485398163;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 8), (-8, 0), (8, -8), (8, 0);
    }
}
Tile(MetalPlat00F)
{
    isCloud = true;
    cloudRotation = 0.785398163;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 0), (-8, -8), (8, 0), (8, 8);
    }
}
Tile(MetalPlat00G)
{
    isCloud = true;
    cloudRotation = -0.785398163;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 8), (-8, 0), (8, -8), (8, 0);
    }
}
Tile(MetalPlat00J)
{
    colorPalette = Metal;
    isCloud = true;
    cloudRotation = 0.785398163;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-4, 0), (-4, -4), (4, 4), (4, 8);
    }
}
Tile(MetalPlat00K)
{
    colorPalette = Metal;
    isCloud = true;
    cloudRotation = 0.785398163;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-4, 0), (-4, -4), (4, 4), (4, 8);
    }
}
Tile(MetalPlat01A)
{
    colorPalette = Metal;
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = H;
    fixture()
    {
        collisionPoints = (-4, 0), (4, 0), (4, 4), (-4, 4);
    }
}
Tile(MetalPlat01B)
{
    colorPalette = Metal;
    colorPalette = Metal;
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = H;
    fixture()
    {
        collisionPoints = (-4, 0), (4, 0), (4, 4), (-4, 4);
    }
}
Tile(MetalPlat01C)
{
    colorPalette = Metal;
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = H;
    fixture()
    {
        collisionPoints = (-4, 0), (4, 0), (4, 4), (-4, 4);
    }
}
Tile(MetalPlat01D)
{
    colorPalette = Metal;
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = H;
    fixture()
    {
        collisionPoints = (-4, 0), (4, 0), (4, 4), (-4, 4);
    }
}
Tile(MetalPlat01E)
{
    colorPalette = Metal;
    isCloud = true;
    cloudRotation = 0.785398163;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 0), (-8, -4), (8, 4), (8, 8);
    }
}
Tile(MetalPlat01F)
{
    colorPalette = Metal;
    isCloud = true;
    cloudRotation = 0.785398163;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-4, 0), (-4, -4), (4, 4), (4, 8);
    }
}
Tile(MetalRail00A) {}
Tile(MetalRoof00A) {}
Tile(MetalRoof00B) {}
Tile(MetalRoof00C) {}
Tile(MetalRoof00D) {}
Tile(MetalRoof00DormerA){}
Tile(MetalRoof00E)
{
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 8), (-8, 0);
    }
}
Tile(MetalRoof00F)
{
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 0), (-8, 8);
    }
}


// TRAIN
defaultTile(d_t)
{
    instaGibPlayer = true;
}
Tile(MetalTrain00A) {}
Tile(MetalTrain00B) {}
Tile(MetalTrain00C) {}
Tile(MetalTrain00D) {}
Tile(MetalTrain00E) {}
Tile(MetalTrain00F) {}
Tile(MetalTrain00G) {}
Tile(MetalTrain00H) {}
Tile(MetalTrain00I) {}
Tile(MetalTrain00J) {}
Tile(MetalTrain00K) {}
Tile(MetalTrain00L) {}
Tile(MetalTrain00M) {}
Tile(MetalTrain00N) {}
Tile(MetalTrain00O) {}
Tile(MetalTrain00P) {}
defaultTile(d_t)
{
    instaGibPlayer = false;
}


// SNOW
defaultTile(d_t)
{
    material = snow;
    sizeable = A;
}
Tile(Snow00A) {}
Tile(Snow00B) {}
Tile(Snow00C) {}
Tile(Snow00D) {}
Tile(Snow00E) {}
Tile(Snow00F) {}


// STONE
defaultTile(d_t)
{
    material = stone;
    colorPalette = Stone;
    sizeable = A;
    instaGibPlayer = true;
}
Tile(Stone00A) {}
Tile(Stone00B) {}
Tile(Stone00C) {}
Tile(Stone01A) {}
Tile(Stone02A) {}
Tile(Stone02B) {}
Tile(Stone02C) {}
Tile(Stone02D) {}
Tile(Stone03A) {}
Tile(Stone03B) {}
Tile(Stone03C) {}
Tile(Stone04A) {}
Tile(Stone04B) {}
Tile(Stone04C) {}
Tile(Stone05A) {}
Tile(Stone05B) {}
Tile(Stone05C) {}
Tile(Stone05D) {}
Tile(Stone06A) {}
Tile(Stone07A) {}
Tile(Stone07B) {}
Tile(Stone08A) {}
Tile(Stone08B) {}
Tile(Stone08C) {}
Tile(Stone08D) {}
Tile(Stone08E) {}
Tile(Stone08F) {}
Tile(Stone08G) {}
Tile(Stone08H) {}
defaultTile(d_t)
{
    instaGibPlayer = false;
}
Tile(Stone08WindowA)
{
    material = glass;
}
Tile(Stone08WindowB)
{
    material = glass;
}
Tile(Stone09A) {}
Tile(Stone09B) {}
Tile(Stone09C)
{
    fixture()
    {
        collisionPoints = (-4, -8), (4, 0), (4, 8), (-4, 0);
    }
}
Tile(Stone09D)
{
    fixture()
    {
        collisionPoints = (-8, -8), (8, 0), (8, 8), (-8, 0);
    }
}
Tile(Stone09E)
{
    fixture()
    {
        collisionPoints = (-4, -8), (4, 0), (4, 8), (-4, 0);
    }
}
Tile(Stone09F)
{
    fixture()
    {
        collisionPoints = (-8, -8), (8, 0), (8, 8), (-8, 0);
    }
}
Tile(Stone09G) {}
Tile(StonePlat00A)
{
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = H;
}
Tile(StonePlat00B)
{
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = H;
}
Tile(StonePlat00C)
{
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = H;
}


// CERAMIC
defaultTile(d_t)
{
    material = ceramic;
    colorPalette = Tile;
    sizeable = D;
}
Tile(RoofTile00A) {}
Tile(RoofTile00B) {}
Tile(RoofTile00C) {}
Tile(RoofTile00D)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 0), (-8, -8), (8, -8), (8, 8);
    }
}
Tile(RoofTile00E)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 8), (-8, -8), (8, -8), (8, 0);
    }
}
Tile(RoofTile00F)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -12), (8, -12), (8, 12), (-8, -4);
    }
}
Tile(RoofTile00G)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -12), (8, -12), (8, -4), (-8, 12);
    }
}
Tile(RoofTile00H)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -12), (8, -12), (8, 12), (-8, -4);
    }
    fixture(a)
    {
        collisionGroup = static_ground;
        collisionPoints = (0, 4), (8, 4), (8, 12), (0, 12);
    }
}
Tile(RoofTile00I)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -12), (8, -12), (8, -4), (-8, 12);
    }
    fixture(a)
    {
        collisionGroup = static_ground;
        collisionPoints = (-8, 4), (0, 4), (0, 12), (-8, 12);
    }
}
Tile(RoofTile00J) {}
Tile(RoofTile00K) {}
Tile(RoofTile00L) {}
Tile(RoofTile00M) {}
Tile(RoofTile00N) {}
Tile(RoofTile00O) {}


// WOOD
defaultTile(d_t)
{
    material = wood;
    colorPalette = Wood;
    sizeable = D;
}
Tile(Wood00A) {}
Tile(Wood00B) {}
Tile(Wood00C) {}
Tile(Wood00D) {}
Tile(Wood00E)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 0), (-8, -8), (8, 0), (8, 8);
    }
}
Tile(Wood00F)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 8), (-8, 0), (8, -8), (8, 0);
    }
}
Tile(Wood01A) {}
Tile(Wood01B) {}
Tile(Wood01C) {}
Tile(Wood02A) {}
Tile(Wood02B) {}
Tile(Wood02C) {}
Tile(Wood02D)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 8), (-8, 0);
    }
}
Tile(Wood02E)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 0), (-8, 8);
    }
}
Tile(Wood02F)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -4), (8, -4), (8, 4);
    }
}
Tile(Wood02G)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -4), (8, -4), (-8, 4);
    }
}
Tile(Wood02H)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 8);
    }
}
Tile(Wood02I)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (-8, 8);
    }
}
Tile(Wood03A) {}
Tile(Wood03B) {}
Tile(Wood03C) {}
Tile(Wood03D) {}
Tile(Wood03E) {}
Tile(Wood03F) {}
Tile(Wood04A) {}
Tile(Wood04B) {}
Tile(Wood04C) {}
Tile(Wood04D)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, -8), (8, -8), (8, 8), (-8, 0);
    }
}
Tile(Wood04E)
{
    sizeable = N;
    fixture()
    {
        collisionPoints = (-4, -8), (4, -8), (4, 8), (-4, 0);
    }
}
Tile(Wood05A) {}
Tile(Wood06A) {}
Tile(Wood06B) {}
Tile(Wood06C) {}
Tile(Wood06D) {}
Tile(Wood06E) {}
Tile(Wood06Weak)
{
    life = 50;
}
Tile(WoodCounter00)
{
    punchable = true;
    kickable = true;
    sizeable = N;
    drawCategory = OBJ;
    fixture()
    {
        collisionGroup = static_ground;
    }
}
Tile(WoodLadder00A)
{
    isLadder = true;
    sizeable = V;
    freeRotation = false;
    projectileHit = false;
    material.blockExplosions = false;
    fixture()
    {
        blockFire = false;
        collisionGroup = none;
        collisionPoints = (-6, -4), (6, -4), (6, 4), (-6, 4);
    }
}
Tile(WoodPlat01A)
{
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = H;
    fixture()
    {
        collisionPoints = (-4, 0), (4, 0), (4, 4), (-4, 4);
    }
}
Tile(WoodPlat01B)
{
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = H;
    fixture()
    {
        collisionPoints = (-4, 0), (4, 0), (4, 4), (-4, 4);
    }
}
Tile(WoodPlat01C)
{
    isCloud = true;
    cloudRotation = 0.0;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = H;
    fixture()
    {
        collisionPoints = (-4, 0), (4, 0), (4, 4), (-4, 4);
    }
}
Tile(WoodPlat01D)
{
    isCloud = true;
    cloudRotation = 0.785398163;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-4, 0), (-4, -4), (4, 4), (4, 8);
    }
}
Tile(WoodPlat01E)
{
    isCloud = true;
    cloudRotation = 0.785398163;
    absorbProjectile = false;
    material.blockExplosions = false;
    sizeable = N;
    fixture()
    {
        collisionPoints = (-8, 0), (-8, -4), (8, 4), (8, 8);
    }
}


// ------------------------------------- FOREGROUND SOLID -------------------------------------
defaultTile(d_t)
{
    drawCategory = FG;
    fixture()
    {
        collisionGroup = static_ground;
    }
}
Tile(FgAdobe00A)
{
	material = concrete;
	colorPalette = Concrete;
	tileTexture = Adobe00A;
}
Tile(FgAdobe00B)
{
	material = concrete;
	colorPalette = Concrete;
	tileTexture = Adobe00B;
}
Tile(FgAdobe00C)
{
	material = concrete;
	colorPalette = Concrete;
	tileTexture = Adobe00C;
}
Tile(FgAdobe00D)
{
	material = concrete;
	colorPalette = Concrete;
	tileTexture = Adobe00D;
}
Tile(FgAdobe00E)
{
	material = concrete;
	colorPalette = Concrete;
	tileTexture = Adobe00E;
}
Tile(FgAdobe00F)
{
	material = concrete;
	colorPalette = Concrete;
	tileTexture = Adobe00F;
}
Tile(FgAdobe00G)
{
	material = concrete;
	colorPalette = Concrete;
	tileTexture = Adobe00G;
}
Tile(FgAdobe00H)
{
	material = concrete;
	colorPalette = Concrete;
	tileTexture = Adobe00H;
}
Tile(FgAdobe00I)
{
	material = concrete;
	colorPalette = Concrete;
	tileTexture = Adobe00I;
}
Tile(FgAdobe00J)
{
	material = concrete;
	colorPalette = Concrete;
	tileTexture = Adobe00J;
}
Tile(FgAdobe00K)
{
	material = concrete;
	colorPalette = Concrete;
	tileTexture = Adobe00K;
}
Tile(FgAdobe00L)
{
	material = concrete;
	colorPalette = Concrete;
	tileTexture = Adobe00L;
}
Tile(FgAdobeArch00A)
{
	sizeable = N;
	material = concrete;
	colorPalette = Concrete;
	tileTexture = AdobeArch00A;
	fixture()
	{
		collisionPoints = (-8, -4), (4, 8), (-8, 8);
	}
}
Tile(FgAdobeArch00B)
{
	sizeable = N;
	material = concrete;
	colorPalette = Concrete;
	tileTexture = AdobeArch00B;
	fixture()
	{
		collisionPoints = (8, -4), (8, 8), (-4, 8);
	}
}


// ------------------------------------- FOREGROUND NON-SOLID -------------------------------------
defaultTile(d_t)
{
    drawCategory = FG;
    projectileHit = false;
    material.blockExplosions = false;
    fixture()
    {
        blockFire = false;
        collisionGroup = none;
        collisionPoints = null;
    }
}
Tile(FgWoodPillar00A){}
Tile(FgWoodPillar00B){}
Tile(FgWoodPillar00C){}
Tile(FgWoodRailing00A){}
Tile(FgStone00A)
{
    colorPalette = Stone;
}
Tile(FgShadow00A)
{
    tileTexture = Shadow00A;
    sizeable = D;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(FgShadow00B)
{
    tileTexture = Shadow00B;
    sizeable = D;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(FgShadow00C)
{
    tileTexture = Shadow00C;
    sizeable = D;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(FgShadow00D)
{
    tileTexture = Shadow00D;
    sizeable = D;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(FgShadow00E)
{
    tileTexture = Shadow00E;
    sizeable = D;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(FgShadow02A)
{
    tileTexture = Shadow02A;
    sizeable = D;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(FgShadow02B)
{
    tileTexture = Shadow02B;
    sizeable = D;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(FgShadow03A)
{
    tileTexture = Shadow03A;
    sizeable = D;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(FgShadow03B)
{
    tileTexture = Shadow03B;
    sizeable = D;
    fixture()
    {
        mass = 0.5 kg;
    }
}
Tile(FgTube00A) {}
Tile(FgTube00B) {}
Tile(FgTube00C) {}